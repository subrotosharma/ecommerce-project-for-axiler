# Ansible Playbook for Node Configuration - ansible/playbooks/configure-nodes.yml
---
- name: Configure EKS Worker Nodes
  hosts: eks_nodes
  become: yes
  vars:
    monitoring_namespace: monitoring
    log_retention_days: 30
    
  tasks:
    - name: Update system packages
      yum:
        name: '*'
        state: latest
      when: ansible_os_family == "RedHat"

    - name: Install essential packages
      package:
        name:
          - htop
          - iotop
          - sysstat
          - tcpdump
          - vim
          - curl
          - jq
        state: present

    - name: Configure kernel parameters for Kubernetes
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      with_items:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }
        - { key: 'vm.max_map_count', value: '262144' }
        - { key: 'fs.file-max', value: '65536' }

    - name: Configure log rotation
      template:
        src: logrotate.conf.j2
        dest: /etc/logrotate.d/kubernetes
        mode: '0644'

    - name: Install and configure Fluentd
      block:
        - name: Add Fluentd repository
          yum_repository:
            name: td-agent
            description: TreasureData Fluentd
            baseurl: https://packages.treasuredata.com/4/redhat/$releasever/$basearch
            gpgkey: https://packages.treasuredata.com/GPG-KEY-td-agent
            enabled: yes

        - name: Install Fluentd
          yum:
            name: td-agent
            state: present

        - name: Configure Fluentd for Kubernetes
          template:
            src: fluent.conf.j2
            dest: /etc/td-agent/td-agent.conf
            backup: yes

        - name: Start and enable Fluentd
          systemd:
            name: td-agent
            state: started
            enabled: yes

    - name: Install Node Exporter for Prometheus
      block:
        - name: Download Node Exporter
          get_url:
            url: https://github.com/prometheus/node_exporter/releases/download/v1.6.1/node_exporter-1.6.1.linux-amd64.tar.gz
            dest: /tmp/node_exporter.tar.gz

        - name: Extract Node Exporter
          unarchive:
            src: /tmp/node_exporter.tar.gz
            dest: /usr/local/bin
            remote_src: yes
            extra_opts:
              - --strip-components=1

        - name: Create Node Exporter service
          template:
            src: node_exporter.service.j2
            dest: /etc/systemd/system/node_exporter.service

        - name: Start Node Exporter
          systemd:
            name: node_exporter
            state: started
            enabled: yes
            daemon_reload: yes

    - name: Configure Docker daemon
      template:
        src: daemon.json.j2
        dest: /etc/docker/daemon.json
        backup: yes
      notify: restart docker

    - name: Setup CloudWatch agent
      block:
        - name: Download CloudWatch agent
          get_url:
            url: https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            dest: /tmp/amazon-cloudwatch-agent.rpm

        - name: Install CloudWatch agent
          yum:
            name: /tmp/amazon-cloudwatch-agent.rpm
            state: present

        - name: Configure CloudWatch agent
          template:
            src: cloudwatch-config.json.j2
            dest: /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json

        - name: Start CloudWatch agent
          systemd:
            name: amazon-cloudwatch-agent
            state: started
            enabled: yes

    - name: Setup security hardening
      block:
        - name: Configure firewall rules
          firewalld:
            service: "{{ item }}"
            permanent: yes
            state: enabled
          with_items:
            - ssh
            - https
            - http
          when: ansible_os_family == "RedHat"

        - name: Setup fail2ban
          package:
            name: fail2ban
            state: present

        - name: Configure fail2ban
          template:
            src: jail.local.j2
            dest: /etc/fail2ban/jail.local
          notify: restart fail2ban

        - name: Enable SELinux
          selinux:
            policy: targeted
            state: enforcing
          when: ansible_os_family == "RedHat"

    - name: Configure audit logging
      block:
        - name: Install auditd
          package:
            name: audit
            state: present

        - name: Configure audit rules
          template:
            src: audit.rules.j2
            dest: /etc/audit/rules.d/kubernetes.rules
          notify: restart auditd

    - name: Setup performance monitoring
      block:
        - name: Install performance tools
          package:
            name:
              - perf
              - bcc-tools
              - strace
            state: present

        - name: Configure performance metrics collection
          cron:
            name: "Collect performance metrics"
            minute: "*/5"
            job: "/usr/local/bin/collect_metrics.sh"

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted

    - name: restart fail2ban
      systemd:
        name: fail2ban
        state: restarted

    - name: restart auditd
      systemd:
        name: auditd
        state: restarted

---
- name: Configure Monitoring Infrastructure
  hosts: localhost
  connection: local
  
  tasks:
    - name: Deploy Prometheus Operator
      kubernetes.core.helm:
        name: prometheus-operator
        chart_ref: prometheus-community/kube-prometheus-stack
        release_namespace: monitoring
        create_namespace: true
        values:
          prometheus:
            retention: 30d
            storageSpec:
              volumeClaimTemplate:
                spec:
                  resources:
                    requests:
                      storage: 100Gi

    - name: Deploy custom Prometheus rules
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: monitoring.coreos.com/v1
          kind: PrometheusRule
          metadata:
            name: custom-alerts
            namespace: monitoring
          spec:
            groups:
              - name: kubernetes-apps
                rules:
                  - alert: PodCrashLooping
                    expr: rate(kube_pod_container_status_restarts_total[1h]) > 0
                    for: 5m
                    annotations:
                      summary: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is crash looping"

    - name: Configure Grafana dashboards
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: grafana-dashboards
            namespace: monitoring
          data:
            dashboard.json: |
              {
                "dashboard": {
                  "title": "Kubernetes Cluster Overview",
                  "panels": []
                }
              }